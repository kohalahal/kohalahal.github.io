I"3*<h2 id="제1장-들어가기">제1장 들어가기</h2>

<p>프로그래밍 언어를 할 때, 그 언어 핵심(알고리즘적인지 함수적인지 객체지향인지..), 어휘, 관례·효과적 방법등 알아야.</p>

<p>자바는, 단일 상속의 객체 지향적 언어. 명령형 코드이다.</p>

<p>프로그래밍 코드는 <strong>수정</strong>이 쉬워야한다. 이해시키고 작동하는게 다가 아니다.</p>

<p><strong>이 다음 버전의 기능</strong>을 고려해서, 수정 용이한 혈태로 처음부터 짜는게 중요하다.</p>

<p><strong>정해진 동작, 예측할 수 있는 동작만</strong> 해야. 사용자 놀라게 하지 않기.</p>

<p>코드는 복사하는게 아니라 재사용 되어야한다.</p>

<p>이 책에서…</p>

<dl>
  <dt>API</dt>
  <dd>프로그래머가 접근 가능한 모든 인터페이스, 생성자, 멤버, 클래스, 직렬화…(퍼블릭 클래스, 인터페이스의 퍼블릭 멤버, 생성자)</dd>
  <dt>사용자</dt>
  <dd>API를 사용하는 프로그래머</dd>
  <dt>클라이언트</dt>
  <dd>API를 사용하는 클래스 or 코드</dd>
</dl>

<h2 id="제2장-객제-생성과-파괴">제2장 객제 생성과 파괴</h2>

<h3 id="아이템1-객체-생성에-정적-팩토리-메소드를-쓸-수-있다">아이템1 객체 생성에 정적 팩토리 메소드를 쓸 수 있다.</h3>

<p>그러면-&gt; 객체 종류같은거 수정해도, 팩토리 메소드만 고치면 돼서 수정하기 좋다.</p>

<p>만약에 정적 팩토리가 interface 타입을 반환하게하면 더~ 유연하겠죠?</p>

<p>(인터페이스 기반 프레임워크(예:Collection)의 핵심)</p>

<p>※Collection: 인터페이스
Collections: 인스턴스화 불가 유틸리티 클래스, static 메소드로 Collection 받은 애들을 반환해줌. 수정불가, 동기화등 기능 붙임. 내부는 공개되어있지 않음.?! <em>책 한 번만 더 확인해야쥥</em></p>

<p>-정적 팩토리 메소드 명명 관습</p>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">Date</span><span class="o">.</span><span class="na">from</span><span class="o">();</span>
<span class="nc">Enumset</span><span class="o">.</span><span class="na">of</span><span class="o">();</span>
<span class="nc">BigInteger</span><span class="o">.</span><span class="na">valueOf</span><span class="o">();</span>
<span class="nc">Something</span><span class="o">.</span><span class="na">getInstance</span><span class="o">();</span>
<span class="nc">Something</span><span class="o">.</span><span class="na">getSomethingElse</span><span class="o">();</span>
<span class="nc">Something</span><span class="o">.</span><span class="na">newSomethingElse</span><span class="o">();</span>
</code></pre></div></div>

<h3 id="아이템2-생성자에-매개변수가-많다면-빌더를-고려하라">아이템2 생성자에 매개변수가 많다면 빌더를 고려하라</h3>

<p>코드2-3 빌더 패턴</p>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">NutritionFacts</span> <span class="o">{</span>
    <span class="kd">private</span> <span class="kd">final</span> <span class="kt">int</span> <span class="n">servingSize</span><span class="o">;</span>
    <span class="kd">private</span> <span class="kd">final</span> <span class="kt">int</span> <span class="n">servings</span><span class="o">;</span>
    <span class="kd">private</span> <span class="kd">final</span> <span class="kt">int</span> <span class="n">calories</span><span class="o">;</span>
    <span class="kd">private</span> <span class="kd">final</span> <span class="kt">int</span> <span class="n">fat</span><span class="o">;</span>
    <span class="kd">private</span> <span class="kd">final</span> <span class="kt">int</span> <span class="n">sodium</span><span class="o">;</span>
    <span class="kd">private</span> <span class="kd">final</span> <span class="kt">int</span> <span class="n">carbonhydrate</span><span class="o">;</span>

    <span class="kd">public</span> <span class="kd">static</span> <span class="kd">class</span> <span class="nc">Builder</span> <span class="o">{</span>
        <span class="c1">//필수 매개 변수</span>
        <span class="kd">private</span> <span class="kd">final</span> <span class="kt">int</span> <span class="n">servingSize</span><span class="o">;</span>
        <span class="kd">private</span> <span class="kd">final</span> <span class="kt">int</span> <span class="n">servings</span><span class="o">;</span>

        <span class="c1">//선택 매개 변수</span>
        <span class="kd">private</span> <span class="kt">int</span> <span class="n">calories</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
        <span class="kd">private</span> <span class="kt">int</span> <span class="n">fat</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
        <span class="kd">private</span> <span class="kt">int</span> <span class="n">sodium</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
        <span class="kd">private</span> <span class="kt">int</span> <span class="n">carbonhydrate</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>

        <span class="kd">public</span> <span class="nf">Builder</span><span class="o">(</span><span class="kt">int</span> <span class="n">servingSize</span><span class="o">,</span> <span class="kt">int</span> <span class="n">servings</span><span class="o">)</span> <span class="o">{</span>
            <span class="k">this</span><span class="o">.</span><span class="na">servingSize</span> <span class="o">=</span> <span class="n">servingSize</span><span class="o">;</span>
            <span class="k">this</span><span class="o">.</span><span class="na">servings</span> <span class="o">=</span> <span class="n">servings</span><span class="o">;</span>
        <span class="o">}</span>

        <span class="kd">public</span> <span class="nc">Builder</span> <span class="nf">calories</span><span class="o">(</span><span class="kt">int</span> <span class="n">val</span><span class="o">)</span> <span class="o">{</span>
            <span class="n">calories</span> <span class="o">=</span> <span class="n">val</span><span class="o">;</span>
            <span class="k">return</span> <span class="k">this</span><span class="o">;</span>
        <span class="o">}</span>
        <span class="kd">public</span> <span class="nc">Builder</span> <span class="nf">fat</span><span class="o">(</span><span class="kt">int</span> <span class="n">val</span><span class="o">)</span> <span class="o">{</span>
            <span class="n">fat</span> <span class="o">=</span> <span class="n">val</span><span class="o">;</span>
            <span class="k">return</span> <span class="k">this</span><span class="o">;</span>
        <span class="o">}</span>
        <span class="kd">public</span> <span class="nc">Builder</span> <span class="nf">sodium</span><span class="o">(</span><span class="kt">int</span> <span class="n">val</span><span class="o">)</span> <span class="o">{</span>
            <span class="n">sodium</span> <span class="o">=</span> <span class="n">val</span><span class="o">;</span>
            <span class="k">return</span> <span class="k">this</span><span class="o">;</span>
        <span class="o">}</span>
        <span class="kd">public</span> <span class="nc">Builder</span> <span class="nf">carbonhydrate</span><span class="o">(</span><span class="kt">int</span> <span class="n">val</span><span class="o">)</span> <span class="o">{</span>
            <span class="n">carbonhydrate</span> <span class="o">=</span> <span class="n">val</span><span class="o">;</span>
            <span class="k">return</span> <span class="k">this</span><span class="o">;</span>
        <span class="o">}</span>

        <span class="kd">public</span> <span class="nc">NutritionFacts</span> <span class="nf">build</span><span class="o">()</span> <span class="o">{</span>
            <span class="k">return</span> <span class="k">new</span> <span class="nf">NutiritionFacts</span><span class="o">(</span><span class="k">this</span><span class="o">);</span>
        <span class="o">}</span>
    <span class="o">}</span>

    <span class="kd">private</span> <span class="nf">NutritionFacts</span><span class="o">(</span><span class="nc">Builder</span> <span class="n">builder</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">servingSize</span> <span class="o">=</span> <span class="n">builder</span><span class="o">.</span><span class="na">servingSize</span><span class="o">;</span>
        <span class="n">servings</span> <span class="o">=</span> <span class="n">builder</span><span class="o">.</span><span class="na">servings</span><span class="o">;</span>
        <span class="n">calories</span> <span class="o">=</span> <span class="n">builder</span><span class="o">.</span><span class="na">calories</span><span class="o">;</span>
        <span class="n">fat</span> <span class="o">=</span> <span class="n">builder</span><span class="o">.</span><span class="na">fat</span><span class="o">;</span>
        <span class="n">sodium</span> <span class="o">=</span> <span class="n">builder</span><span class="o">.</span><span class="na">sodium</span><span class="o">;</span>
        <span class="n">carbonhydrate</span> <span class="o">=</span> <span class="n">builder</span><span class="o">.</span><span class="na">carbonhydrate</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>

</code></pre></div></div>

<h3 id="아이템3-private-생성자나-열거타입으로-싱글턴임을-보증하라">아이템3 private 생성자나 열거타입으로 싱글턴임을 보증하라</h3>

<h3 id="아이템4-인스턴스화를-막으려거든-private-생성자를-사용하라">아이템4 인스턴스화를 막으려거든 private 생성자를 사용하라</h3>

<h3 id="아이템5-자원을-직접-명시하지-말고-의존-객체-주입을-사용하라">아이템5 자원을 직접 명시하지 말고 의존 객체 주입을 사용하라</h3>

<h3 id="아이템6-불필요한-객체-생성을-피하라">아이템6 불필요한 객체 생성을 피하라</h3>

<h3 id="아이템7-다-쓴-객체-참조를-해제하라">아이템7 다 쓴 객체 참조를 해제하라</h3>

<h3 id="아이템8-finalizer와-cleaner-사용을-피하라">아이템8 finalizer와 cleaner 사용을 피하라</h3>

<h3 id="아이템9-try-finally-보다-try-with-resources를-사용하라">아이템9 try-finally 보다 try-with-resources를 사용하라</h3>

:ET