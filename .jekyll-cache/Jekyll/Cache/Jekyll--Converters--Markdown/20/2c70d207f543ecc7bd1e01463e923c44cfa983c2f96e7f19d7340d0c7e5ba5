I"q<h2 id="6장">6장</h2>
<p>참조형의 스페셜 타입 두가지:이넘, 어노테이션</p>

<h3 id="아이템34인트-상수-대신-이넘을-써라">아이템34.인트 상수 대신 이넘을 써라.</h3>

<p>이넘은 정해진 값의 세트로 이뤄진 타입. (예:태양계 행성Planet타입에는 아무거나 오면 안되고 수금지화목토천해왕성만 와야 한다.)</p>

<p>이런 고정값 열거를 위해서 인트 상수를 쓰는 인트 이넘 패턴은 별로다.(옛날에 그렇게 많이 했나봄) 자바는 이넘을 완전한 객체로 잘 만들어놨으니 쓰세요.</p>

<dl>
  <dt>자바의 이넘은</dt>
  <dd>public static final필드를 통해 각 고정값 열거에 대해서 하나의 객체를 반환하는 클래스.</dd>
</dl>

<p>접근 가능한 생성자 없어서 final객체, 싱글턴이다.</p>

<p>그 외에도 좋은 점 많다… 안정적이다…</p>

<p>이넘은 특성상 불변이어야하니 모든 필드를 final로 하세요.</p>

<p>생성된 이넘 객체에 iv가 있어야되면 생성자 매개변수도 다 선언해두고, 생성자에서 이걸 iv에 저장하도록 하세요.</p>

<h3 id="아이템35-번째는-iv로-두세요">아이템35. ‘#번째’는 iv로 두세요</h3>

<p>이넘 속에 들어 있는 고정값들은 자기가 몇 번째 값인지 중요할 때가 많습니다. int iv로 두세요.</p>

<h3 id="아이템36-비트-필드-대신-이넘셋을-쓰세요">아이템36. 비트 필드 대신 이넘셋을 쓰세요.</h3>

<p>비트필드는 비트적으로 OR연산해서 고정값들을 셋으로 만들어서 조합하거나 교차하게 했습니다.</p>

<p>이제 구식이고, java.util.Enumset이라는 걸로 고정갑 셋 만들수있게 다 만들어놨습니다.</p>

<p>이넘타입 여러 개 주려면 Enumset.of(이넘클래스이름.고정값이름, 이넘클래스이름.고정값이름)으로 주고, et<이넘클래스이름>으로 받으세요.</이넘클래스이름></p>

<h3 id="아이템37-몇번째가-필요하면-이넘맵을-쓰세요">아이템37. ’몇번째’가 필요하면 이넘맵을 쓰세요.</h3>

<p>예:이넘타입 다만들어서 특정 순서대로 정렬하고싶을 때(행성을 길이순대로 정렬하려할떄)</p>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">Map</span><span class="o">&lt;</span><span class="nl">키:</span><span class="n">이넘클래스</span><span class="o">.</span><span class="err">’</span><span class="n">몇번째</span><span class="err">’</span><span class="n">와관련있는필드</span><span class="o">,</span> <span class="nl">밸류:</span><span class="nc">Set</span><span class="o">&lt;</span><span class="n">이넘클래스</span><span class="o">&gt;&gt;</span> <span class="err">@@</span> <span class="o">=</span> 
<span class="k">new</span> <span class="nc">Enum</span><span class="o">&lt;</span><span class="n">ap</span><span class="o">&lt;&gt;(</span> <span class="n">이넘클래스</span><span class="o">.</span><span class="err">’</span><span class="n">몇번째</span><span class="err">’</span><span class="n">와관련있는필드</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
</code></pre></div></div>
<p>Stream도 쓸 수 있다.</p>

<p>※<em>.class를 하면 뭐가나오는가?-&gt;자바 정석 다시보기 1에서 해봄</em></p>

<h3 id="아이템38-인터페이스가-확장-가능한-이넘인척-하게-하세요">아이템38 인터페이스가 확장 가능한 이넘인척 하게 하세요</h3>

<p>이넘이 옛날 방식보다 훨 좋은데, 단점 하나는 확장이 안된다는 것입니다.</p>

<p>예외적으로 Operation codes, opcodes인 경우에는 되는데, 이넘 고정값들이 어떤 동작을 나타낼 때 opcode라고 합니다.</p>

<p>인터페이스를 만들어놓고, 이넘으로 확장합니다. 이넘은 확장안되지만 인터페이스는 확장되기때문에, 다른 이넘도 만들 수 있습니다.</p>

<h3 id="아이템39-네이밍-패턴보다-어노테이션을-쓰세요">아이템39 네이밍 패턴보다 어노테이션을 쓰세요.</h3>

<p>프레임워크나 다른 도구(예:테스트 도구)로 처리돼야하는 요소는 네이밍패턴을 이용했는데, 단점들이 많아서 어노테이션을 만들었고,아주 잘됩니다. 자바가 만들어둔 것들을 쓰세요.</p>

<dl>
  <dt>메타-어노테이션</dt>
  <dd>어노테이션에 달린 어노테이션.</dd>
</dl>

<p>그 어노테이션이 언제 유효한지 등등 정보를 선언한 것.</p>

<p>Javax.annotation.processing과 같은 어노테이션 프로세서가 이걸 보고 따름.</p>

<p>프로세서가 없으면 소용이 없겟지요.</p>

<h3 id="아이템40-override어노테이션-상시-다세요">아이템40 @Override어노테이션 상시 다세요.</h3>

<p>통상적인 프로그래머한테는 Override 어노테이션이 젤 중요.</p>

<p>이걸 쓰면 컴파일러도 한번 더 봐준다.</p>

<p>추상클래스의 추상메소드를 재정의할땐 안해도됨.</p>

<h3 id="아이템41-타입-정의를-위해-마커-인터페이스를-쓰세요">아이템41 타입 정의를 위해 마커 인터페이스를 쓰세요.</h3>

<p>마커 인터페이스는 메소드같은건 없고 몇가지 속성만 표시(마크)하는 것이다.</p>

<p>(예:cloneable은 안에 정의된게 없고 클론할수있는지 없는지 알아보는 용도다.)</p>

<p>마커 인터페이스가 마커 어노테이션보다 안좋다고들 하는데, 좋은 점이 두 가지 있다.</p>

<p>젤 중요한 장점은 <strong>마커인터페이스는 객체 타입을 정의하는데, 마커어노테이션은 못하는거다.</strong></p>

<p>타입이 있는게 컴파일 에러잡고 런타임 에러 방지하기에 좋다. 두번째는 인터페이스가 더 정확하게 지정될수있다.(앞에랑 똑같은 말인듯)</p>

<p>마커 어노테이션이 좋은점은 어노테이션기능에 속하기 때문에, 어노테이션 기반 프레임워크에서는 좋다.</p>

<p>그래서 프로그램 요소를 마크할땐 마커어노테이션, 클래스나 인터페이스에 관한거면 마커인터페이스를 쓰면 되겠다.</p>

<p>마커 어노테이션을 만들면서, 타겟이 ElementType.TYPE이면 마커 인터페이스를 만들어야되는게 아닌지 다시 생각해봐라.</p>

<p>※https://jdm.kr/blog/216</p>

:ET